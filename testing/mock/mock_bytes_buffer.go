// Code generated by MockGen. DO NOT EDIT.
// Source: buffer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockByteBuffer is a mock of ByteBuffer interface.
type MockByteBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockByteBufferMockRecorder
}

// MockByteBufferMockRecorder is the mock recorder for MockByteBuffer.
type MockByteBufferMockRecorder struct {
	mock *MockByteBuffer
}

// NewMockByteBuffer creates a new mock instance.
func NewMockByteBuffer(ctrl *gomock.Controller) *MockByteBuffer {
	mock := &MockByteBuffer{ctrl: ctrl}
	mock.recorder = &MockByteBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockByteBuffer) EXPECT() *MockByteBufferMockRecorder {
	return m.recorder
}

// GetBufferBytes mocks base method.
func (m *MockByteBuffer) GetBufferBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBufferBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBufferBytes indicates an expected call of GetBufferBytes.
func (mr *MockByteBufferMockRecorder) GetBufferBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBufferBytes", reflect.TypeOf((*MockByteBuffer)(nil).GetBufferBytes))
}

// GetBytes mocks base method.
func (m *MockByteBuffer) GetBytes(arg0 int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockByteBufferMockRecorder) GetBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockByteBuffer)(nil).GetBytes), arg0)
}

// GetInt32 mocks base method.
func (m *MockByteBuffer) GetInt32(arg0 int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt32", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt32 indicates an expected call of GetInt32.
func (mr *MockByteBufferMockRecorder) GetInt32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt32", reflect.TypeOf((*MockByteBuffer)(nil).GetInt32), arg0)
}

// GetString mocks base method.
func (m *MockByteBuffer) GetString(arg0 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockByteBufferMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockByteBuffer)(nil).GetString), arg0)
}

// GetUint32 mocks base method.
func (m *MockByteBuffer) GetUint32(arg0 int64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint32", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint32 indicates an expected call of GetUint32.
func (mr *MockByteBufferMockRecorder) GetUint32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint32", reflect.TypeOf((*MockByteBuffer)(nil).GetUint32), arg0)
}

// Read mocks base method.
func (m *MockByteBuffer) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockByteBufferMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockByteBuffer)(nil).Read), p)
}

// Reset mocks base method.
func (m *MockByteBuffer) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockByteBufferMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockByteBuffer)(nil).Reset))
}

// Seek mocks base method.
func (m *MockByteBuffer) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockByteBufferMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockByteBuffer)(nil).Seek), offset, whence)
}

// SetBytes mocks base method.
func (m *MockByteBuffer) SetBytes(arg0 int64, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBytes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBytes indicates an expected call of SetBytes.
func (mr *MockByteBufferMockRecorder) SetBytes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBytes", reflect.TypeOf((*MockByteBuffer)(nil).SetBytes), arg0, arg1)
}

// SetInt32 mocks base method.
func (m *MockByteBuffer) SetInt32(arg0 int64, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInt32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInt32 indicates an expected call of SetInt32.
func (mr *MockByteBufferMockRecorder) SetInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt32", reflect.TypeOf((*MockByteBuffer)(nil).SetInt32), arg0, arg1)
}

// SetString mocks base method.
func (m *MockByteBuffer) SetString(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetString", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetString indicates an expected call of SetString.
func (mr *MockByteBufferMockRecorder) SetString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetString", reflect.TypeOf((*MockByteBuffer)(nil).SetString), arg0, arg1)
}

// SetUint32 mocks base method.
func (m *MockByteBuffer) SetUint32(arg0 int64, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUint32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUint32 indicates an expected call of SetUint32.
func (mr *MockByteBufferMockRecorder) SetUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUint32", reflect.TypeOf((*MockByteBuffer)(nil).SetUint32), arg0, arg1)
}

// Write mocks base method.
func (m *MockByteBuffer) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockByteBufferMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockByteBuffer)(nil).Write), p)
}
