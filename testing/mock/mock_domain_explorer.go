// Code generated by MockGen. DO NOT EDIT.
// Source: explorer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledb_go/backend/domain"
)

// MockExplorer is a mock of Explorer interface.
type MockExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerMockRecorder
}

// MockExplorerMockRecorder is the mock recorder for MockExplorer.
type MockExplorerMockRecorder struct {
	mock *MockExplorer
}

// NewMockExplorer creates a new mock instance.
func NewMockExplorer(ctrl *gomock.Controller) *MockExplorer {
	mock := &MockExplorer{ctrl: ctrl}
	mock.recorder = &MockExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplorer) EXPECT() *MockExplorerMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockExplorer) OpenFile(arg0 domain.FileName) (*domain.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0)
	ret0, _ := ret[0].(*domain.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockExplorerMockRecorder) OpenFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockExplorer)(nil).OpenFile), arg0)
}
