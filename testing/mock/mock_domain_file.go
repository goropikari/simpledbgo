// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/domain"
)

// MockExplorer is a mock of Explorer interface.
type MockExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerMockRecorder
}

// MockExplorerMockRecorder is the mock recorder for MockExplorer.
type MockExplorerMockRecorder struct {
	mock *MockExplorer
}

// NewMockExplorer creates a new mock instance.
func NewMockExplorer(ctrl *gomock.Controller) *MockExplorer {
	mock := &MockExplorer{ctrl: ctrl}
	mock.recorder = &MockExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplorer) EXPECT() *MockExplorerMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockExplorer) OpenFile(arg0 domain.FileName) (*domain.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0)
	ret0, _ := ret[0].(*domain.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockExplorerMockRecorder) OpenFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockExplorer)(nil).OpenFile), arg0)
}

// MockByteSliceFactory is a mock of ByteSliceFactory interface.
type MockByteSliceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockByteSliceFactoryMockRecorder
}

// MockByteSliceFactoryMockRecorder is the mock recorder for MockByteSliceFactory.
type MockByteSliceFactoryMockRecorder struct {
	mock *MockByteSliceFactory
}

// NewMockByteSliceFactory creates a new mock instance.
func NewMockByteSliceFactory(ctrl *gomock.Controller) *MockByteSliceFactory {
	mock := &MockByteSliceFactory{ctrl: ctrl}
	mock.recorder = &MockByteSliceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockByteSliceFactory) EXPECT() *MockByteSliceFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockByteSliceFactory) Create(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockByteSliceFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockByteSliceFactory)(nil).Create), arg0)
}
