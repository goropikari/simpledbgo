// Code generated by MockGen. DO NOT EDIT.
// Source: file_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/domain"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// BlockLength mocks base method.
func (m *MockFileManager) BlockLength(arg0 domain.FileName) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockLength", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockLength indicates an expected call of BlockLength.
func (mr *MockFileManagerMockRecorder) BlockLength(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockLength", reflect.TypeOf((*MockFileManager)(nil).BlockLength), arg0)
}

// BlockSize mocks base method.
func (m *MockFileManager) BlockSize() domain.BlockSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSize")
	ret0, _ := ret[0].(domain.BlockSize)
	return ret0
}

// BlockSize indicates an expected call of BlockSize.
func (mr *MockFileManagerMockRecorder) BlockSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSize", reflect.TypeOf((*MockFileManager)(nil).BlockSize))
}

// CopyBlockToPage mocks base method.
func (m *MockFileManager) CopyBlockToPage(arg0 domain.Block, arg1 *domain.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBlockToPage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyBlockToPage indicates an expected call of CopyBlockToPage.
func (mr *MockFileManagerMockRecorder) CopyBlockToPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBlockToPage", reflect.TypeOf((*MockFileManager)(nil).CopyBlockToPage), arg0, arg1)
}

// CopyPageToBlock mocks base method.
func (m *MockFileManager) CopyPageToBlock(arg0 *domain.Page, arg1 domain.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyPageToBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyPageToBlock indicates an expected call of CopyPageToBlock.
func (mr *MockFileManagerMockRecorder) CopyPageToBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyPageToBlock", reflect.TypeOf((*MockFileManager)(nil).CopyPageToBlock), arg0, arg1)
}

// ExtendFile mocks base method.
func (m *MockFileManager) ExtendFile(arg0 domain.FileName) (domain.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendFile", arg0)
	ret0, _ := ret[0].(domain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendFile indicates an expected call of ExtendFile.
func (mr *MockFileManagerMockRecorder) ExtendFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendFile", reflect.TypeOf((*MockFileManager)(nil).ExtendFile), arg0)
}
