// Code generated by MockGen. DO NOT EDIT.
// Source: log_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/backend/domain"
)

// MockLogManager is a mock of LogManager interface.
type MockLogManager struct {
	ctrl     *gomock.Controller
	recorder *MockLogManagerMockRecorder
}

// MockLogManagerMockRecorder is the mock recorder for MockLogManager.
type MockLogManagerMockRecorder struct {
	mock *MockLogManager
}

// NewMockLogManager creates a new mock instance.
func NewMockLogManager(ctrl *gomock.Controller) *MockLogManager {
	mock := &MockLogManager{ctrl: ctrl}
	mock.recorder = &MockLogManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogManager) EXPECT() *MockLogManagerMockRecorder {
	return m.recorder
}

// AppendNewBlock mocks base method.
func (m *MockLogManager) AppendNewBlock() (*domain.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendNewBlock")
	ret0, _ := ret[0].(*domain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendNewBlock indicates an expected call of AppendNewBlock.
func (mr *MockLogManagerMockRecorder) AppendNewBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendNewBlock", reflect.TypeOf((*MockLogManager)(nil).AppendNewBlock))
}

// AppendRecord mocks base method.
func (m *MockLogManager) AppendRecord(arg0 []byte) (domain.LSN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendRecord", arg0)
	ret0, _ := ret[0].(domain.LSN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendRecord indicates an expected call of AppendRecord.
func (mr *MockLogManagerMockRecorder) AppendRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRecord", reflect.TypeOf((*MockLogManager)(nil).AppendRecord), arg0)
}

// Flush mocks base method.
func (m *MockLogManager) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockLogManagerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockLogManager)(nil).Flush))
}

// FlushLSN mocks base method.
func (m *MockLogManager) FlushLSN(arg0 domain.LSN) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushLSN", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushLSN indicates an expected call of FlushLSN.
func (mr *MockLogManagerMockRecorder) FlushLSN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushLSN", reflect.TypeOf((*MockLogManager)(nil).FlushLSN), arg0)
}

// Iterator mocks base method.
func (m *MockLogManager) Iterator() (domain.LogIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(domain.LogIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Iterator indicates an expected call of Iterator.
func (mr *MockLogManagerMockRecorder) Iterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockLogManager)(nil).Iterator))
}

// LogFileName mocks base method.
func (m *MockLogManager) LogFileName() domain.FileName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFileName")
	ret0, _ := ret[0].(domain.FileName)
	return ret0
}

// LogFileName indicates an expected call of LogFileName.
func (mr *MockLogManagerMockRecorder) LogFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFileName", reflect.TypeOf((*MockLogManager)(nil).LogFileName))
}

// MockLogIterator is a mock of LogIterator interface.
type MockLogIterator struct {
	ctrl     *gomock.Controller
	recorder *MockLogIteratorMockRecorder
}

// MockLogIteratorMockRecorder is the mock recorder for MockLogIterator.
type MockLogIteratorMockRecorder struct {
	mock *MockLogIterator
}

// NewMockLogIterator creates a new mock instance.
func NewMockLogIterator(ctrl *gomock.Controller) *MockLogIterator {
	mock := &MockLogIterator{ctrl: ctrl}
	mock.recorder = &MockLogIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogIterator) EXPECT() *MockLogIteratorMockRecorder {
	return m.recorder
}

// HasNext mocks base method.
func (m *MockLogIterator) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockLogIteratorMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockLogIterator)(nil).HasNext))
}

// Next mocks base method.
func (m *MockLogIterator) Next() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockLogIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockLogIterator)(nil).Next))
}
