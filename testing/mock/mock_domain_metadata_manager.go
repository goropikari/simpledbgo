// Code generated by MockGen. DO NOT EDIT.
// Source: metadata_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/domain"
)

// MockMetadataManager is a mock of MetadataManager interface.
type MockMetadataManager struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataManagerMockRecorder
}

// MockMetadataManagerMockRecorder is the mock recorder for MockMetadataManager.
type MockMetadataManagerMockRecorder struct {
	mock *MockMetadataManager
}

// NewMockMetadataManager creates a new mock instance.
func NewMockMetadataManager(ctrl *gomock.Controller) *MockMetadataManager {
	mock := &MockMetadataManager{ctrl: ctrl}
	mock.recorder = &MockMetadataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataManager) EXPECT() *MockMetadataManagerMockRecorder {
	return m.recorder
}

// CreateIndex mocks base method.
func (m *MockMetadataManager) CreateIndex(idxName domain.IndexName, tblName domain.TableName, fldName domain.FieldName, txn domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", idxName, tblName, fldName, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockMetadataManagerMockRecorder) CreateIndex(idxName, tblName, fldName, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockMetadataManager)(nil).CreateIndex), idxName, tblName, fldName, txn)
}

// CreateTable mocks base method.
func (m *MockMetadataManager) CreateTable(tblName domain.TableName, sch *domain.Schema, txn domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tblName, sch, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockMetadataManagerMockRecorder) CreateTable(tblName, sch, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockMetadataManager)(nil).CreateTable), tblName, sch, txn)
}

// CreateView mocks base method.
func (m *MockMetadataManager) CreateView(viewName domain.ViewName, viewDef domain.ViewDef, txn domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", viewName, viewDef, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView.
func (mr *MockMetadataManagerMockRecorder) CreateView(viewName, viewDef, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockMetadataManager)(nil).CreateView), viewName, viewDef, txn)
}

// GetIndexInfo mocks base method.
func (m *MockMetadataManager) GetIndexInfo(tblName domain.TableName, txn domain.Transaction) (map[domain.FieldName]*domain.IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexInfo", tblName, txn)
	ret0, _ := ret[0].(map[domain.FieldName]*domain.IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexInfo indicates an expected call of GetIndexInfo.
func (mr *MockMetadataManagerMockRecorder) GetIndexInfo(tblName, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexInfo", reflect.TypeOf((*MockMetadataManager)(nil).GetIndexInfo), tblName, txn)
}

// GetStatInfo mocks base method.
func (m *MockMetadataManager) GetStatInfo(tblName domain.TableName, layout *domain.Layout, txn domain.Transaction) (domain.StatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatInfo", tblName, layout, txn)
	ret0, _ := ret[0].(domain.StatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatInfo indicates an expected call of GetStatInfo.
func (mr *MockMetadataManagerMockRecorder) GetStatInfo(tblName, layout, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatInfo", reflect.TypeOf((*MockMetadataManager)(nil).GetStatInfo), tblName, layout, txn)
}

// GetTableLayout mocks base method.
func (m *MockMetadataManager) GetTableLayout(tblName domain.TableName, txn domain.Transaction) (*domain.Layout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableLayout", tblName, txn)
	ret0, _ := ret[0].(*domain.Layout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableLayout indicates an expected call of GetTableLayout.
func (mr *MockMetadataManagerMockRecorder) GetTableLayout(tblName, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableLayout", reflect.TypeOf((*MockMetadataManager)(nil).GetTableLayout), tblName, txn)
}

// GetViewDef mocks base method.
func (m *MockMetadataManager) GetViewDef(viewName domain.ViewName, txn domain.Transaction) (domain.ViewDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewDef", viewName, txn)
	ret0, _ := ret[0].(domain.ViewDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewDef indicates an expected call of GetViewDef.
func (mr *MockMetadataManagerMockRecorder) GetViewDef(viewName, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewDef", reflect.TypeOf((*MockMetadataManager)(nil).GetViewDef), viewName, txn)
}
