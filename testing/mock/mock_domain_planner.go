// Code generated by MockGen. DO NOT EDIT.
// Source: planner.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/domain"
)

// MockPlanner is a mock of Planner interface.
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner.
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance.
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// EstDistinctVals mocks base method.
func (m *MockPlanner) EstDistinctVals(arg0 domain.FieldName) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstDistinctVals", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// EstDistinctVals indicates an expected call of EstDistinctVals.
func (mr *MockPlannerMockRecorder) EstDistinctVals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstDistinctVals", reflect.TypeOf((*MockPlanner)(nil).EstDistinctVals), arg0)
}

// EstNumBlocks mocks base method.
func (m *MockPlanner) EstNumBlocks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstNumBlocks")
	ret0, _ := ret[0].(int)
	return ret0
}

// EstNumBlocks indicates an expected call of EstNumBlocks.
func (mr *MockPlannerMockRecorder) EstNumBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstNumBlocks", reflect.TypeOf((*MockPlanner)(nil).EstNumBlocks))
}

// EstNumRecord mocks base method.
func (m *MockPlanner) EstNumRecord() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstNumRecord")
	ret0, _ := ret[0].(int)
	return ret0
}

// EstNumRecord indicates an expected call of EstNumRecord.
func (mr *MockPlannerMockRecorder) EstNumRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstNumRecord", reflect.TypeOf((*MockPlanner)(nil).EstNumRecord))
}

// Open mocks base method.
func (m *MockPlanner) Open() (domain.Scanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(domain.Scanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockPlannerMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPlanner)(nil).Open))
}

// Schema mocks base method.
func (m *MockPlanner) Schema() *domain.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(*domain.Schema)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockPlannerMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockPlanner)(nil).Schema))
}

// MockQueryPlanner is a mock of QueryPlanner interface.
type MockQueryPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockQueryPlannerMockRecorder
}

// MockQueryPlannerMockRecorder is the mock recorder for MockQueryPlanner.
type MockQueryPlannerMockRecorder struct {
	mock *MockQueryPlanner
}

// NewMockQueryPlanner creates a new mock instance.
func NewMockQueryPlanner(ctrl *gomock.Controller) *MockQueryPlanner {
	mock := &MockQueryPlanner{ctrl: ctrl}
	mock.recorder = &MockQueryPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryPlanner) EXPECT() *MockQueryPlannerMockRecorder {
	return m.recorder
}

// CreatePlan mocks base method.
func (m *MockQueryPlanner) CreatePlan(arg0 *domain.QueryData, arg1 domain.Transaction) (domain.Planner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlan", arg0, arg1)
	ret0, _ := ret[0].(domain.Planner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlan indicates an expected call of CreatePlan.
func (mr *MockQueryPlannerMockRecorder) CreatePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlan", reflect.TypeOf((*MockQueryPlanner)(nil).CreatePlan), arg0, arg1)
}
