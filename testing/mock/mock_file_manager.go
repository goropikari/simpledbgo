// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	os0 "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	os "github.com/goropikari/simpledb_go/lib/os"
)

// MockExplorer is a mock of Explorer interface.
type MockExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerMockRecorder
}

// MockExplorerMockRecorder is the mock recorder for MockExplorer.
type MockExplorerMockRecorder struct {
	mock *MockExplorer
}

// NewMockExplorer creates a new mock instance.
func NewMockExplorer(ctrl *gomock.Controller) *MockExplorer {
	mock := &MockExplorer{ctrl: ctrl}
	mock.recorder = &MockExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplorer) EXPECT() *MockExplorerMockRecorder {
	return m.recorder
}

// MkdirAll mocks base method.
func (m *MockExplorer) MkdirAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockExplorerMockRecorder) MkdirAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockExplorer)(nil).MkdirAll), path)
}

// OpenFile mocks base method.
func (m *MockExplorer) OpenFile(path string, isDirectIO bool) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", path, isDirectIO)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockExplorerMockRecorder) OpenFile(path, isDirectIO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockExplorer)(nil).OpenFile), path, isDirectIO)
}

// ReadDir mocks base method.
func (m *MockExplorer) ReadDir(name string) ([]os0.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", name)
	ret0, _ := ret[0].([]os0.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockExplorerMockRecorder) ReadDir(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockExplorer)(nil).ReadDir), name)
}

// Remove mocks base method.
func (m *MockExplorer) Remove(dir, file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", dir, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockExplorerMockRecorder) Remove(dir, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockExplorer)(nil).Remove), dir, file)
}
