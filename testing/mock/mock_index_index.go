// Code generated by MockGen. DO NOT EDIT.
// Source: index.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/goropikari/simpledbgo/backend/domain"
	meta "github.com/goropikari/simpledbgo/meta"
)

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// BeforeFirst mocks base method.
func (m *MockIndex) BeforeFirst(searchKey meta.Constant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeFirst", searchKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeFirst indicates an expected call of BeforeFirst.
func (mr *MockIndexMockRecorder) BeforeFirst(searchKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeFirst", reflect.TypeOf((*MockIndex)(nil).BeforeFirst), searchKey)
}

// Close mocks base method.
func (m *MockIndex) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIndexMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIndex)(nil).Close))
}

// Delete mocks base method.
func (m *MockIndex) Delete(arg0 meta.Constant, arg1 domain.RecordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIndexMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndex)(nil).Delete), arg0, arg1)
}

// GetDataRecordID mocks base method.
func (m *MockIndex) GetDataRecordID() (domain.RecordID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataRecordID")
	ret0, _ := ret[0].(domain.RecordID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRecordID indicates an expected call of GetDataRecordID.
func (mr *MockIndexMockRecorder) GetDataRecordID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRecordID", reflect.TypeOf((*MockIndex)(nil).GetDataRecordID))
}

// HasNext mocks base method.
func (m *MockIndex) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockIndexMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockIndex)(nil).HasNext))
}

// Insert mocks base method.
func (m *MockIndex) Insert(arg0 meta.Constant, arg1 domain.RecordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIndexMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIndex)(nil).Insert), arg0, arg1)
}
