// Code generated by MockGen. DO NOT EDIT.
// Source: record.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrecord "github.com/goropikari/simpledbgo/backend/tx/logrecord"
	domain "github.com/goropikari/simpledbgo/domain"
)

// MockTxVisitor is a mock of TxVisitor interface.
type MockTxVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockTxVisitorMockRecorder
}

// MockTxVisitorMockRecorder is the mock recorder for MockTxVisitor.
type MockTxVisitorMockRecorder struct {
	mock *MockTxVisitor
}

// NewMockTxVisitor creates a new mock instance.
func NewMockTxVisitor(ctrl *gomock.Controller) *MockTxVisitor {
	mock := &MockTxVisitor{ctrl: ctrl}
	mock.recorder = &MockTxVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxVisitor) EXPECT() *MockTxVisitorMockRecorder {
	return m.recorder
}

// Pin mocks base method.
func (m *MockTxVisitor) Pin(arg0 domain.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pin indicates an expected call of Pin.
func (mr *MockTxVisitorMockRecorder) Pin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockTxVisitor)(nil).Pin), arg0)
}

// UndoSetInt32 mocks base method.
func (m *MockTxVisitor) UndoSetInt32(arg0 *logrecord.SetInt32Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoSetInt32", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndoSetInt32 indicates an expected call of UndoSetInt32.
func (mr *MockTxVisitorMockRecorder) UndoSetInt32(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoSetInt32", reflect.TypeOf((*MockTxVisitor)(nil).UndoSetInt32), arg0)
}

// UndoSetString mocks base method.
func (m *MockTxVisitor) UndoSetString(arg0 *logrecord.SetStringRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoSetString", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndoSetString indicates an expected call of UndoSetString.
func (mr *MockTxVisitorMockRecorder) UndoSetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoSetString", reflect.TypeOf((*MockTxVisitor)(nil).UndoSetString), arg0)
}

// Unpin mocks base method.
func (m *MockTxVisitor) Unpin(arg0 domain.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unpin", arg0)
}

// Unpin indicates an expected call of Unpin.
func (mr *MockTxVisitorMockRecorder) Unpin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpin", reflect.TypeOf((*MockTxVisitor)(nil).Unpin), arg0)
}

// MockLogRecorder is a mock of LogRecorder interface.
type MockLogRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockLogRecorderMockRecorder
}

// MockLogRecorderMockRecorder is the mock recorder for MockLogRecorder.
type MockLogRecorderMockRecorder struct {
	mock *MockLogRecorder
}

// NewMockLogRecorder creates a new mock instance.
func NewMockLogRecorder(ctrl *gomock.Controller) *MockLogRecorder {
	mock := &MockLogRecorder{ctrl: ctrl}
	mock.recorder = &MockLogRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRecorder) EXPECT() *MockLogRecorderMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockLogRecorder) Marshal() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockLogRecorderMockRecorder) Marshal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockLogRecorder)(nil).Marshal))
}

// Operator mocks base method.
func (m *MockLogRecorder) Operator() logrecord.RecordType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operator")
	ret0, _ := ret[0].(logrecord.RecordType)
	return ret0
}

// Operator indicates an expected call of Operator.
func (mr *MockLogRecorderMockRecorder) Operator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operator", reflect.TypeOf((*MockLogRecorder)(nil).Operator))
}

// TxNumber mocks base method.
func (m *MockLogRecorder) TxNumber() domain.TransactionNumber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxNumber")
	ret0, _ := ret[0].(domain.TransactionNumber)
	return ret0
}

// TxNumber indicates an expected call of TxNumber.
func (mr *MockLogRecorderMockRecorder) TxNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxNumber", reflect.TypeOf((*MockLogRecorder)(nil).TxNumber))
}

// Undo mocks base method.
func (m *MockLogRecorder) Undo(arg0 logrecord.TxVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undo indicates an expected call of Undo.
func (mr *MockLogRecorderMockRecorder) Undo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undo", reflect.TypeOf((*MockLogRecorder)(nil).Undo), arg0)
}

// Unmarshal mocks base method.
func (m *MockLogRecorder) Unmarshal(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockLogRecorderMockRecorder) Unmarshal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockLogRecorder)(nil).Unmarshal), arg0)
}
