// Code generated by MockGen. DO NOT EDIT.
// Source: buffer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockByteBuffer is a mock of ByteBuffer interface.
type MockByteBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockByteBufferMockRecorder
}

// MockByteBufferMockRecorder is the mock recorder for MockByteBuffer.
type MockByteBufferMockRecorder struct {
	mock *MockByteBuffer
}

// NewMockByteBuffer creates a new mock instance.
func NewMockByteBuffer(ctrl *gomock.Controller) *MockByteBuffer {
	mock := &MockByteBuffer{ctrl: ctrl}
	mock.recorder = &MockByteBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockByteBuffer) EXPECT() *MockByteBufferMockRecorder {
	return m.recorder
}

// GetBytes mocks base method.
func (m *MockByteBuffer) GetBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockByteBufferMockRecorder) GetBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockByteBuffer)(nil).GetBytes))
}

// Read mocks base method.
func (m *MockByteBuffer) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockByteBufferMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockByteBuffer)(nil).Read), p)
}

// Seek mocks base method.
func (m *MockByteBuffer) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockByteBufferMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockByteBuffer)(nil).Seek), offset, whence)
}

// Write mocks base method.
func (m *MockByteBuffer) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockByteBufferMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockByteBuffer)(nil).Write), p)
}
