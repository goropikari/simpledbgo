// Code generated by MockGen. DO NOT EDIT.
// Source: transactioner.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/goropikari/simpledb_go/backend/core"
)

// MockTransactioner is a mock of Transactioner interface.
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner.
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance.
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransactioner) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionerMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactioner)(nil).Commit))
}

// GetInt32 mocks base method.
func (m *MockTransactioner) GetInt32(arg0 *core.Block, arg1 int64) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt32", arg0, arg1)
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetInt32 indicates an expected call of GetInt32.
func (mr *MockTransactionerMockRecorder) GetInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt32", reflect.TypeOf((*MockTransactioner)(nil).GetInt32), arg0, arg1)
}

// GetString mocks base method.
func (m *MockTransactioner) GetString(arg0 *core.Block, arg1 int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockTransactionerMockRecorder) GetString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockTransactioner)(nil).GetString), arg0, arg1)
}

// Pin mocks base method.
func (m *MockTransactioner) Pin(arg0 *core.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pin indicates an expected call of Pin.
func (mr *MockTransactionerMockRecorder) Pin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockTransactioner)(nil).Pin), arg0)
}

// Recover mocks base method.
func (m *MockTransactioner) Recover() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover")
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockTransactionerMockRecorder) Recover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockTransactioner)(nil).Recover))
}

// Rollback mocks base method.
func (m *MockTransactioner) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionerMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactioner)(nil).Rollback))
}

// SetInt32 mocks base method.
func (m *MockTransactioner) SetInt32(arg0 *core.Block, arg1 int64, arg2 int32, arg3 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInt32", arg0, arg1, arg2, arg3)
}

// SetInt32 indicates an expected call of SetInt32.
func (mr *MockTransactionerMockRecorder) SetInt32(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt32", reflect.TypeOf((*MockTransactioner)(nil).SetInt32), arg0, arg1, arg2, arg3)
}

// SetString mocks base method.
func (m *MockTransactioner) SetString(arg0 *core.Block, arg1 int64, arg2 string, arg3 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetString", arg0, arg1, arg2, arg3)
}

// SetString indicates an expected call of SetString.
func (mr *MockTransactionerMockRecorder) SetString(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetString", reflect.TypeOf((*MockTransactioner)(nil).SetString), arg0, arg1, arg2, arg3)
}

// Unpin mocks base method.
func (m *MockTransactioner) Unpin(arg0 *core.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpin indicates an expected call of Unpin.
func (mr *MockTransactionerMockRecorder) Unpin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpin", reflect.TypeOf((*MockTransactioner)(nil).Unpin), arg0)
}
